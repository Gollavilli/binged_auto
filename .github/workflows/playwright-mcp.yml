name: Playwright MCP Action

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Task prompt for the AI'
        required: true
        default: 'get the latest 5 release versions of the datadog helm : https://github.com/DataDog/helm-charts'

jobs:
  playwright-mcp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install playwright @playwright/test axios dotenv

      - name: Setup Playwright
        run: npx playwright install chromium

      - name: Create MCP script
        run: |
          cat > playwright-mcp.js << 'EOF'
          const { chromium } = require('playwright');
          const axios = require('axios');
          require('dotenv').config();

          async function runTask(prompt) {
            console.log(`Running task with prompt: ${prompt}`);
            
            // Parse the prompt to extract the repository URL
            const repoUrlMatch = prompt.match(/https:\/\/github\.com\/([^\/]+)\/([^\/\s]+)/);
            if (!repoUrlMatch) {
              console.error('No valid GitHub repository URL found in the prompt');
              return;
            }
            
            const owner = repoUrlMatch[1];
            const repo = repoUrlMatch[2];
            
            try {
              // Use GitHub API to fetch releases (doesn't require browser automation)
              const response = await axios.get(`https://api.github.com/repos/${owner}/${repo}/releases`, {
                headers: {
                  'Accept': 'application/vnd.github.v3+json',
                  ...(process.env.GITHUB_TOKEN ? { 'Authorization': `token ${process.env.GITHUB_TOKEN}` } : {})
                }
              });
              
              // Get the latest 5 releases
              const latestReleases = response.data.slice(0, 5);
              
              console.log(`\n==== Latest 5 releases for ${owner}/${repo} ====`);
              latestReleases.forEach((release, index) => {
                console.log(`${index + 1}. ${release.tag_name} - Released on: ${new Date(release.published_at).toLocaleDateString()}`);
              });
              
              // For more complex tasks, we could use browser automation with Playwright
              if (prompt.includes('use browser')) {
                const browser = await chromium.launch();
                const context = await browser.newContext();
                const page = await context.newPage();
                
                await page.goto(`https://github.com/${owner}/${repo}/releases`);
                console.log(`\nBrowser visited: https://github.com/${owner}/${repo}/releases`);
                
                // Additional browser automation logic would go here
                
                await browser.close();
              }
              
              // If the prompt requires OpenAI integration
              if (prompt.includes('use openai') && process.env.OPENAI_API_KEY) {
                console.log('\nUsing OpenAI API to process the data...');
                // Here you would add your OpenAI API integration
                // Example: summarize the release notes, etc.
              }
              
            } catch (error) {
              console.error('Error executing task:', error.message);
            }
          }

          // Main execution
          const prompt = process.argv[2];
          if (!prompt) {
            console.error('No prompt provided. Usage: node playwright-mcp.js "your prompt here"');
            process.exit(1);
          }

          runTask(prompt).then(() => process.exit(0));
          EOF

      - name: Run MCP with prompt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node playwright-mcp.js "${{ github.event.inputs.prompt }}"
