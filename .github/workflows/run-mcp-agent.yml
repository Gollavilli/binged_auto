name: Run MCP + OpenAI from Source

on:
  workflow_dispatch:

jobs:
  agent-runner:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clone and Build MCP from GitHub
        run: |
          git clone https://github.com/microsoft/playwright-mcp.git
          cd playwright-mcp
          npm install
          npm run build
          npm install openai dotenv

      - name: Write agent-runner script into MCP folder
        run: |
          cat << 'EOF' > playwright-mcp/agent-runner.mjs
import { MCPServer, MCPClient } from "./dist/index.js";
import OpenAI from "openai";
import * as dotenv from "dotenv";
dotenv.config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const INSTRUCTION = process.argv[2];

const run = async () => {
  const server = await MCPServer.launch();
  const client = await MCPClient.connect(server.wsEndpoint());

  await client.page.goto("https://github.com/DataDog/helm-charts/releases");
  const snapshot = await client.page.accessibility.snapshot();

  const chat = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      { role: "system", content: "You are a helpful browser agent." },
      { role: "user", content: \`Instruction: \${INSTRUCTION}\\n\\nSnapshot: \${JSON.stringify(snapshot).slice(0, 12000)}...\` }
    ]
  });

  console.log("ðŸ§  GPT-4 Output:\\n", chat.choices[0].message.content);
  await client.close();
  await server.close();
};

run();
EOF

      - name: Run MCP agent
        run: |
          cd playwright-mcp
          node agent-runner.mjs "Get the latest release tag from https://github.com/DataDog/helm-charts"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
